function getRow (inputGrid, rowIndex) {
  // retrieve row based on row's index position
  return inputGrid[rowIndex];
}

function getColumn (inputGrid, columnIndex) {
  // retrieve column based on column's index position
  var returnArray = [];
  inputGrid.forEach(function(element) {
    returnArray.push(element[columnIndex]);
  });
  return returnArray;
}

function getSection (inputGrid, gridXCoordinate, gridYCoordinate) {
  //create an Array to match X an Y coordinates to index values in the input array
  var getSectionArray = [
    [0,1,2],
    [3,4,5],
    [6,7,8],
  ];
  
  //convert our X and Y coordinates to index values 
  var indexesToInspect = [];
  indexesToInspect.push(getSectionArray[gridXCoordinate]);
  indexesToInspect.push(getSectionArray[gridYCoordinate]);
  
  //iterate through to populate our output array
  var returnArray = [];
  var xSection = indexesToInspect[0];
  var ySection = indexesToInspect[1];
  for (var i = 0; i < ySection.length; i++) {
    currentYIndex = ySection[i];
    for (var j = 0; j < xSection.length; j++) {
      currentXIndex = xSection[j];
      var numberToGrab = inputGrid[currentYIndex][currentXIndex];
      returnArray.push(numberToGrab);
    }
  }
  
  return returnArray;
}


function checkPuzzle(inputGrid) {
  // input grid size (# of rows)
  var gridSize = 9;
  
  // create an array of indexes to check each section.
  var sectionCheckArrayOfIndexes = [];
  for (var x = 0; x < gridSize / 3; x++) {
    for (var y = 0; y < gridSize / 3; y++) {
      sectionCheckArrayOfIndexes.push([x,y]);
    }
  }
  
  // create a good array to compare to each row, column, section
  var goodArray = [];
  for (var i = 0; i < gridSize; i++) {
    goodArray.push(i+1);
  }
  var goodArrayToCompare = goodArray.sort().toString();
  
  
  //check each row
  for (var rowCount = 0; rowCount < gridSize; rowCount++) {
    var rowArray = getRow(inputGrid, rowCount);
    var rowArrayToCompare = rowArray.slice().sort().toString();
    
    // sum all values in the array, return false if any !== 45
    var sumOfRow = rowArray.reduce(function (accumulator, currentElem) {
      return accumulator + currentElem;
    }, 0);
    if (sumOfRow !== 45) return false;
    
    // check against good array
    if (rowArrayToCompare !== goodArrayToCompare) return false;
    
  }
  
  
  //check each column
  for (var columnCount = 0; columnCount < gridSize; columnCount++) {
    var columnArray = getColumn(inputGrid, columnCount);
    var columnArrayToCompare = columnArray.slice().sort().toString();
    
    // sum all values in the array, return false if any !== 45
    var sumOfColumn = columnArray.reduce(function (accumulator, currentElem) {
      return accumulator + currentElem;
    }, 0);
    if (sumOfColumn !== 45) return false;
    
    // check against good array
    if (columnArrayToCompare !== goodArrayToCompare) return false;
    
  }
  
  //check each section
  for (var sectionCount = 0; sectionCount < gridSize; sectionCount++) {
    var currentSectionXIndex = sectionCheckArrayOfIndexes[sectionCount][0];
    var currentSectionYIndex = sectionCheckArrayOfIndexes[sectionCount][1];
    var sectionArray = getSection(inputGrid, currentSectionXIndex, currentSectionYIndex);
    var sectionArrayToCompare = sectionArray.slice().sort().toString();
    
    // sum all values in the array, return false if any !== 45
    var sumOfSection = sectionArray.reduce(function (accumulator, currentElem) {
      return accumulator + currentElem;
    }, 0);
    if (sumOfSection !== 45) return false;
    
    // check against good array
    if (sectionArrayToCompare !== goodArrayToCompare) return false;
    
  }
  
  // if everything passes, return true
  return true;
}




var puzzle = [[ 8,9,5,   7,4,2,   1,3,6 ],
              [ 2,7,1,   9,6,3,   4,8,5 ],
              [ 4,6,3,   5,8,1,   7,9,2 ],

              [ 9,3,4,   6,1,7,   2,5,8 ],
              [ 5,1,7,   2,3,8,   9,6,4 ],
              [ 6,8,2,   4,5,9,   3,7,1 ],

              [ 1,5,9,   8,7,4,   6,2,3 ],
              [ 7,4,6,   3,2,5,   8,1,9 ],
              [ 3,2,8,   1,9,6,   5,4,7 ]];


// getRow(puzzle, 8);
// -> [ 3,2,8,1,9,6,5,4,7 ]

// getRow(puzzle, 0);
// // -> [ 8,9,5,7,4,2,1,3,6 ]

// getColumn(puzzle, 0);
// // -> [ 8,2,4,9,5,6,1,7,3 ]

// getColumn(puzzle, 8);
// // -> [ 6,5,2,8,4,1,3,9,7 ]

// getSection(puzzle, 0, 0);
// // -> [ 8,9,5,2,7,1,4,6,3 ]

// getSection(puzzle, 1,0);
// // -> [ 7,4,2,9,6,3,5,8,1 ]

checkPuzzle (puzzle);
// // -> [ 8,9,5,2,7,1,4,6,3 ]
